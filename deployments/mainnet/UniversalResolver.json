{
  "address": "0x0D3b4af7f0f89C67163e5A301Ba1b37A16C968f1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "_urls",
          "type": "string[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "urls",
          "type": "string[]"
        },
        {
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        },
        {
          "internalType": "bytes4",
          "name": "callbackFunction",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "OffchainLookup",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "string[]",
          "name": "gateways",
          "type": "string[]"
        },
        {
          "internalType": "bytes4",
          "name": "callbackFunction",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "metaData",
          "type": "bytes"
        }
      ],
      "name": "_resolveSingle",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "batchGatewayURLs",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        }
      ],
      "name": "findResolver",
      "outputs": [
        {
          "internalType": "contract Resolver",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract ENS",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "string[]",
          "name": "gateways",
          "type": "string[]"
        }
      ],
      "name": "resolve",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "resolve",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "",
          "type": "bytes[]"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        },
        {
          "internalType": "string[]",
          "name": "gateways",
          "type": "string[]"
        }
      ],
      "name": "resolve",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "",
          "type": "bytes[]"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "resolve",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "resolveCallback",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "",
          "type": "bytes[]"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "resolveSingleCallback",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "reverseName",
          "type": "bytes"
        },
        {
          "internalType": "string[]",
          "name": "gateways",
          "type": "string[]"
        }
      ],
      "name": "reverse",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "reverseName",
          "type": "bytes"
        }
      ],
      "name": "reverse",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "reverseCallback",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "_urls",
          "type": "string[]"
        }
      ],
      "name": "setGatewayURLs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x880e54aabd5e4d70b627f407c5e9b216a841cac60d4491b3bf39326c88cca40b",
  "receipt": {
    "to": null,
    "from": "0x69420f05A11f617B4B74fFe2E04B2D300dFA556F",
    "contractAddress": "0x0D3b4af7f0f89C67163e5A301Ba1b37A16C968f1",
    "transactionIndex": 79,
    "gasUsed": "2948760",
    "logsBloom": "0x
    "blockHash": "0xa1e68d9976977af17181f7927a354c0b476449e60484fce92d19a67ebf7f76c7",
    "transactionHash": "0x880e54aabd5e4d70b627f407c5e9b216a841cac60d4491b3bf39326c88cca40b",
    "logs": [
      {
        "transactionIndex": 79,
        "blockNumber": 16674618,
        "transactionHash": "0x880e54aabd5e4d70b627f407c5e9b216a841cac60d4491b3bf39326c88cca40b",
        "address": "0x0D3b4af7f0f89C67163e5A301Ba1b37A16C968f1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000069420f05a11f617b4b74ffe2e04b2d300dfa556f"
        ],
        "data": "0x",
        "logIndex": 91,
        "blockHash": "0xa1e68d9976977af17181f7927a354c0b476449e60484fce92d19a67ebf7f76c7"
      }
    ],
    "blockNumber": 16674618,
    "cumulativeGasUsed": "8608397",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
    [
      "https://universal-offchain-unwrapper.ens-cf.workers.dev/"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "7f2f23a913c7bd6ad25d5b30d3461108",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"_urls\",\"type\":\"string[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"urls\",\"type\":\"string[]\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes4\",\"name\":\"callbackFunction\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"OffchainLookup\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"string[]\",\"name\":\"gateways\",\"type\":\"string[]\"},{\"internalType\":\"bytes4\",\"name\":\"callbackFunction\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"metaData\",\"type\":\"bytes\"}],\"name\":\"_resolveSingle\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"batchGatewayURLs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"}],\"name\":\"findResolver\",\"outputs\":[{\"internalType\":\"contract Resolver\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract ENS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"string[]\",\"name\":\"gateways\",\"type\":\"string[]\"}],\"name\":\"resolve\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"resolve\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"internalType\":\"string[]\",\"name\":\"gateways\",\"type\":\"string[]\"}],\"name\":\"resolve\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"resolve\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"resolveCallback\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"resolveSingleCallback\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"reverseName\",\"type\":\"bytes\"},{\"internalType\":\"string[]\",\"name\":\"gateways\",\"type\":\"string[]\"}],\"name\":\"reverse\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"reverseName\",\"type\":\"bytes\"}],\"name\":\"reverse\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"reverseCallback\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_urls\",\"type\":\"string[]\"}],\"name\":\"setGatewayURLs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"findResolver(bytes)\":{\"details\":\"Finds a resolver by recursively querying the registry, starting at the longest name and progressively      removing labels until it finds a result.\",\"params\":{\"name\":\"The name to resolve, in DNS-encoded and normalised form.\"},\"returns\":{\"_0\":\"The Resolver responsible for this name, and the namehash of the full name.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"resolve(bytes,bytes)\":{\"details\":\"Performs ENS name resolution for the supplied name and resolution data.\",\"params\":{\"data\":\"The resolution data, as specified in ENSIP-10.\",\"name\":\"The name to resolve, in normalised and DNS-encoded form.\"},\"returns\":{\"_0\":\"The result of resolving the name.\"}},\"reverse(bytes,string[])\":{\"details\":\"Performs ENS name reverse resolution for the supplied reverse name.\",\"params\":{\"reverseName\":\"The reverse name to resolve, in normalised and DNS-encoded form. e.g. b6E040C9ECAaE172a89bD561c5F73e1C48d28cd9.addr.reverse\"},\"returns\":{\"_0\":\"The resolved name, the resolved address, the reverse resolver address, and the resolver address.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"The Universal Resolver is a contract that handles the work of resolving a name entirely onchain, making it possible to make a single smart contract call to resolve an ENS name.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/UniversalResolver.sol\":\"UniversalResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) external returns (bytes32);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function ttl(bytes32 node) external view returns (uint64);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n\\n    function isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0xf79be82c1a2eb0a77fba4e0972221912e803309081ca460fd2cf61653e55758a\"},\"contracts/resolvers/Resolver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"./profiles/IABIResolver.sol\\\";\\nimport \\\"./profiles/IAddressResolver.sol\\\";\\nimport \\\"./profiles/IAddrResolver.sol\\\";\\nimport \\\"./profiles/IContentHashResolver.sol\\\";\\nimport \\\"./profiles/IDNSRecordResolver.sol\\\";\\nimport \\\"./profiles/IDNSZoneResolver.sol\\\";\\nimport \\\"./profiles/IInterfaceResolver.sol\\\";\\nimport \\\"./profiles/INameResolver.sol\\\";\\nimport \\\"./profiles/IPubkeyResolver.sol\\\";\\nimport \\\"./profiles/ITextResolver.sol\\\";\\nimport \\\"./profiles/IExtendedResolver.sol\\\";\\n\\n/**\\n * A generic resolver interface which includes all the functions including the ones deprecated\\n */\\ninterface Resolver is\\n    IERC165,\\n    IABIResolver,\\n    IAddressResolver,\\n    IAddrResolver,\\n    IContentHashResolver,\\n    IDNSRecordResolver,\\n    IDNSZoneResolver,\\n    IInterfaceResolver,\\n    INameResolver,\\n    IPubkeyResolver,\\n    ITextResolver,\\n    IExtendedResolver\\n{\\n    /* Deprecated events */\\n    event ContentChanged(bytes32 indexed node, bytes32 hash);\\n\\n    function setABI(\\n        bytes32 node,\\n        uint256 contentType,\\n        bytes calldata data\\n    ) external;\\n\\n    function setAddr(bytes32 node, address addr) external;\\n\\n    function setAddr(\\n        bytes32 node,\\n        uint256 coinType,\\n        bytes calldata a\\n    ) external;\\n\\n    function setContenthash(bytes32 node, bytes calldata hash) external;\\n\\n    function setDnsrr(bytes32 node, bytes calldata data) external;\\n\\n    function setName(bytes32 node, string calldata _name) external;\\n\\n    function setPubkey(\\n        bytes32 node,\\n        bytes32 x,\\n        bytes32 y\\n    ) external;\\n\\n    function setText(\\n        bytes32 node,\\n        string calldata key,\\n        string calldata value\\n    ) external;\\n\\n    function setInterface(\\n        bytes32 node,\\n        bytes4 interfaceID,\\n        address implementer\\n    ) external;\\n\\n    function multicall(bytes[] calldata data)\\n        external\\n        returns (bytes[] memory results);\\n\\n    function multicallWithNodeCheck(bytes32 nodehash, bytes[] calldata data)\\n        external\\n        returns (bytes[] memory results);\\n\\n    /* Deprecated functions */\\n    function content(bytes32 node) external view returns (bytes32);\\n\\n    function multihash(bytes32 node) external view returns (bytes memory);\\n\\n    function setContent(bytes32 node, bytes32 hash) external;\\n\\n    function setMultihash(bytes32 node, bytes calldata hash) external;\\n}\\n\",\"keccak256\":\"0x73b6cd44b0ed803083996abd3d2683f2444731b6486045f8274c44fce66bf939\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IABIResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IABIResolver {\\n    event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\\n\\n    /**\\n     * Returns the ABI associated with an ENS node.\\n     * Defined in EIP205.\\n     * @param node The ENS node to query\\n     * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\\n     * @return contentType The content type of the return value\\n     * @return data The ABI data\\n     */\\n    function ABI(bytes32 node, uint256 contentTypes)\\n        external\\n        view\\n        returns (uint256, bytes memory);\\n}\\n\",\"keccak256\":\"0xc6f300aec0d72a050c1d44d53ec740da71e07e64deb7a963a5068f54b93d04dc\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IAddrResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the legacy (ETH-only) addr function.\\n */\\ninterface IAddrResolver {\\n    event AddrChanged(bytes32 indexed node, address a);\\n\\n    /**\\n     * Returns the address associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated address.\\n     */\\n    function addr(bytes32 node) external view returns (address payable);\\n}\\n\",\"keccak256\":\"0x2ad7f2fc60ebe0f93745fe70247f6a854f66af732483fda2a3c5e055614445e8\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the new (multicoin) addr function.\\n */\\ninterface IAddressResolver {\\n    event AddressChanged(\\n        bytes32 indexed node,\\n        uint256 coinType,\\n        bytes newAddress\\n    );\\n\\n    function addr(bytes32 node, uint256 coinType)\\n        external\\n        view\\n        returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x37221203e063dee5aa2a067a6ab3401e9cca41cce5b15230994b6ea377f05ed5\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IContentHashResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IContentHashResolver {\\n    event ContenthashChanged(bytes32 indexed node, bytes hash);\\n\\n    /**\\n     * Returns the contenthash associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated contenthash.\\n     */\\n    function contenthash(bytes32 node) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xd95cd77684ba5752c428d7dceb4ecc6506ac94f4fbb910489637eb68dcd8e366\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IDNSRecordResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IDNSRecordResolver {\\n    // DNSRecordChanged is emitted whenever a given node/name/resource's RRSET is updated.\\n    event DNSRecordChanged(\\n        bytes32 indexed node,\\n        bytes name,\\n        uint16 resource,\\n        bytes record\\n    );\\n    // DNSRecordDeleted is emitted whenever a given node/name/resource's RRSET is deleted.\\n    event DNSRecordDeleted(bytes32 indexed node, bytes name, uint16 resource);\\n\\n    /**\\n     * Obtain a DNS record.\\n     * @param node the namehash of the node for which to fetch the record\\n     * @param name the keccak-256 hash of the fully-qualified name for which to fetch the record\\n     * @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\\n     * @return the DNS record in wire format if present, otherwise empty\\n     */\\n    function dnsRecord(\\n        bytes32 node,\\n        bytes32 name,\\n        uint16 resource\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xcfa52200edd337f2c6c5bf402352600584da033b21323603e53de33051a3e25d\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IDNSZoneResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IDNSZoneResolver {\\n    // DNSZonehashChanged is emitted whenever a given node's zone hash is updated.\\n    event DNSZonehashChanged(\\n        bytes32 indexed node,\\n        bytes lastzonehash,\\n        bytes zonehash\\n    );\\n\\n    /**\\n     * zonehash obtains the hash for the zone.\\n     * @param node The ENS node to query.\\n     * @return The associated contenthash.\\n     */\\n    function zonehash(bytes32 node) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xca1b3a16e7005533f2800a3e66fcdccf7c574deac7913d8c810f40aec1d58dc0\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IExtendedResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IExtendedResolver {\\n    function resolve(bytes memory name, bytes memory data)\\n        external\\n        view\\n        returns (bytes memory, address);\\n}\\n\",\"keccak256\":\"0x0a586a1725cdc5f90f2e302c620a4a033adfc87e49bbcc5a43604ba579bce7a7\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IInterfaceResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IInterfaceResolver {\\n    event InterfaceChanged(\\n        bytes32 indexed node,\\n        bytes4 indexed interfaceID,\\n        address implementer\\n    );\\n\\n    /**\\n     * Returns the address of a contract that implements the specified interface for this name.\\n     * If an implementer has not been set for this interfaceID and name, the resolver will query\\n     * the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\\n     * contract implements EIP165 and returns `true` for the specified interfaceID, its address\\n     * will be returned.\\n     * @param node The ENS node to query.\\n     * @param interfaceID The EIP 165 interface ID to check for.\\n     * @return The address that implements this interface, or 0 if the interface is unsupported.\\n     */\\n    function interfaceImplementer(bytes32 node, bytes4 interfaceID)\\n        external\\n        view\\n        returns (address);\\n}\\n\",\"keccak256\":\"0x6d75d6010016684030e13711b3bc1a4e1a784c7398937f1b7c2b2f328f962c2b\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/INameResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface INameResolver {\\n    event NameChanged(bytes32 indexed node, string name);\\n\\n    /**\\n     * Returns the name associated with an ENS node, for reverse records.\\n     * Defined in EIP181.\\n     * @param node The ENS node to query.\\n     * @return The associated name.\\n     */\\n    function name(bytes32 node) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x9ec392b612447b1acbdc01114f2da2837a658d3f3157f60a99c5269f0b623346\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IPubkeyResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IPubkeyResolver {\\n    event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\\n\\n    /**\\n     * Returns the SECP256k1 public key associated with an ENS node.\\n     * Defined in EIP 619.\\n     * @param node The ENS node to query\\n     * @return x The X coordinate of the curve point for the public key.\\n     * @return y The Y coordinate of the curve point for the public key.\\n     */\\n    function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y);\\n}\\n\",\"keccak256\":\"0x69748947093dd2fda9ddcebd0adf19a6d1e7600df1d4b1462a0417156caddca7\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/ITextResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface ITextResolver {\\n    event TextChanged(\\n        bytes32 indexed node,\\n        string indexed indexedKey,\\n        string key,\\n        string value\\n    );\\n\\n    /**\\n     * Returns the text data associated with an ENS node and key.\\n     * @param node The ENS node to query.\\n     * @param key The text data key to query.\\n     * @return The associated text data.\\n     */\\n    function text(bytes32 node, string calldata key)\\n        external\\n        view\\n        returns (string memory);\\n}\\n\",\"keccak256\":\"0xcc5eada60de63f42f47a4bbc8a5d2bed4cd1394646197a08da7957c6fd90ba5d\",\"license\":\"MIT\"},\"contracts/utils/LowLevelCallUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary LowLevelCallUtils {\\n    using Address for address;\\n\\n    /**\\n     * @dev Makes a static call to the specified `target` with `data`. Return data can be fetched with\\n     *      `returnDataSize` and `readReturnData`.\\n     * @param target The address to staticcall.\\n     * @param data The data to pass to the call.\\n     * @return success True if the call succeeded, or false if it reverts.\\n     */\\n    function functionStaticCall(address target, bytes memory data)\\n        internal\\n        view\\n        returns (bool success)\\n    {\\n        require(\\n            target.isContract(),\\n            \\\"LowLevelCallUtils: static call to non-contract\\\"\\n        );\\n        assembly {\\n            success := staticcall(\\n                gas(),\\n                target,\\n                add(data, 32),\\n                mload(data),\\n                0,\\n                0\\n            )\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the size of the return data of the most recent external call.\\n     */\\n    function returnDataSize() internal pure returns (uint256 len) {\\n        assembly {\\n            len := returndatasize()\\n        }\\n    }\\n\\n    /**\\n     * @dev Reads return data from the most recent external call.\\n     * @param offset Offset into the return data.\\n     * @param length Number of bytes to return.\\n     */\\n    function readReturnData(uint256 offset, uint256 length)\\n        internal\\n        pure\\n        returns (bytes memory data)\\n    {\\n        data = new bytes(length);\\n        assembly {\\n            returndatacopy(add(data, 32), offset, length)\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with the return data from the most recent external call.\\n     */\\n    function propagateRevert() internal pure {\\n        assembly {\\n            returndatacopy(0, 0, returndatasize())\\n            revert(0, returndatasize())\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5119479484321f0c5b092bcccda442d7d96792923811774c63ae85be3872e962\",\"license\":\"MIT\"},\"contracts/utils/NameEncoder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport {BytesUtils} from \\\"../wrapper/BytesUtils.sol\\\";\\n\\nlibrary NameEncoder {\\n    using BytesUtils for bytes;\\n\\n    function dnsEncodeName(string memory name)\\n        internal\\n        pure\\n        returns (bytes memory dnsName, bytes32 node)\\n    {\\n        uint8 labelLength = 0;\\n        bytes memory bytesName = bytes(name);\\n        uint256 length = bytesName.length;\\n        dnsName = new bytes(length + 2);\\n        node = 0;\\n        if (length == 0) {\\n            dnsName[0] = 0;\\n            return (dnsName, node);\\n        }\\n\\n        // use unchecked to save gas since we check for an underflow\\n        // and we check for the length before the loop\\n        unchecked {\\n            for (uint256 i = length - 1; i >= 0; i--) {\\n                if (bytesName[i] == \\\".\\\") {\\n                    dnsName[i + 1] = bytes1(labelLength);\\n                    node = keccak256(\\n                        abi.encodePacked(\\n                            node,\\n                            bytesName.keccak(i + 1, labelLength)\\n                        )\\n                    );\\n                    labelLength = 0;\\n                } else {\\n                    labelLength += 1;\\n                    dnsName[i + 1] = bytesName[i];\\n                }\\n                if (i == 0) {\\n                    break;\\n                }\\n            }\\n        }\\n\\n        node = keccak256(\\n            abi.encodePacked(node, bytesName.keccak(0, labelLength))\\n        );\\n\\n        dnsName[0] = bytes1(labelLength);\\n        return (dnsName, node);\\n    }\\n}\\n\",\"keccak256\":\"0x61b99997cae6ba9df23817c5ef25d5ce5b3d2bb057da3cad3e6300971eb47fc8\",\"license\":\"MIT\"},\"contracts/utils/UniversalResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.17 <0.9.0;\\n\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {LowLevelCallUtils} from \\\"./LowLevelCallUtils.sol\\\";\\nimport {ENS} from \\\"../registry/ENS.sol\\\";\\nimport {IExtendedResolver} from \\\"../resolvers/profiles/IExtendedResolver.sol\\\";\\nimport {Resolver, INameResolver, IAddrResolver} from \\\"../resolvers/Resolver.sol\\\";\\nimport {NameEncoder} from \\\"./NameEncoder.sol\\\";\\nimport {BytesUtils} from \\\"../wrapper/BytesUtils.sol\\\";\\n\\nerror OffchainLookup(\\n    address sender,\\n    string[] urls,\\n    bytes callData,\\n    bytes4 callbackFunction,\\n    bytes extraData\\n);\\n\\nstruct MulticallData {\\n    bytes name;\\n    bytes[] data;\\n    string[] gateways;\\n    bytes4 callbackFunction;\\n    address resolver;\\n    bytes metaData;\\n    bool[] failures;\\n}\\n\\nstruct OffchainLookupCallData {\\n    address sender;\\n    string[] urls;\\n    bytes callData;\\n}\\n\\nstruct OffchainLookupExtraData {\\n    bytes4 callbackFunction;\\n    bytes data;\\n}\\n\\ninterface BatchGateway {\\n    function query(OffchainLookupCallData[] memory data)\\n        external\\n        returns (bool[] memory failures, bytes[] memory responses);\\n}\\n\\n/**\\n * The Universal Resolver is a contract that handles the work of resolving a name entirely onchain,\\n * making it possible to make a single smart contract call to resolve an ENS name.\\n */\\ncontract UniversalResolver is ERC165, Ownable {\\n    using Address for address;\\n    using NameEncoder for string;\\n    using BytesUtils for bytes;\\n\\n    string[] public batchGatewayURLs;\\n    ENS public immutable registry;\\n\\n    constructor(address _registry, string[] memory _urls) {\\n        registry = ENS(_registry);\\n        batchGatewayURLs = _urls;\\n    }\\n\\n    function setGatewayURLs(string[] memory _urls) public onlyOwner {\\n        batchGatewayURLs = _urls;\\n    }\\n\\n    /**\\n     * @dev Performs ENS name resolution for the supplied name and resolution data.\\n     * @param name The name to resolve, in normalised and DNS-encoded form.\\n     * @param data The resolution data, as specified in ENSIP-10.\\n     * @return The result of resolving the name.\\n     */\\n    function resolve(bytes calldata name, bytes memory data)\\n        external\\n        view\\n        returns (bytes memory, address)\\n    {\\n        return\\n            _resolveSingle(\\n                name,\\n                data,\\n                batchGatewayURLs,\\n                this.resolveSingleCallback.selector,\\n                \\\"\\\"\\n            );\\n    }\\n\\n    function resolve(bytes calldata name, bytes[] memory data)\\n        external\\n        view\\n        returns (bytes[] memory, address)\\n    {\\n        return resolve(name, data, batchGatewayURLs);\\n    }\\n\\n    function resolve(\\n        bytes calldata name,\\n        bytes memory data,\\n        string[] memory gateways\\n    ) external view returns (bytes memory, address) {\\n        return\\n            _resolveSingle(\\n                name,\\n                data,\\n                gateways,\\n                this.resolveSingleCallback.selector,\\n                \\\"\\\"\\n            );\\n    }\\n\\n    function resolve(\\n        bytes calldata name,\\n        bytes[] memory data,\\n        string[] memory gateways\\n    ) public view returns (bytes[] memory, address) {\\n        return\\n            _resolve(name, data, gateways, this.resolveCallback.selector, \\\"\\\");\\n    }\\n\\n    function _resolveSingle(\\n        bytes calldata name,\\n        bytes memory data,\\n        string[] memory gateways,\\n        bytes4 callbackFunction,\\n        bytes memory metaData\\n    ) public view returns (bytes memory, address) {\\n        bytes[] memory dataArr = new bytes[](1);\\n        dataArr[0] = data;\\n        (bytes[] memory results, address resolver) = _resolve(\\n            name,\\n            dataArr,\\n            gateways,\\n            callbackFunction,\\n            metaData\\n        );\\n        return (results[0], resolver);\\n    }\\n\\n    function _resolve(\\n        bytes calldata name,\\n        bytes[] memory data,\\n        string[] memory gateways,\\n        bytes4 callbackFunction,\\n        bytes memory metaData\\n    ) internal view returns (bytes[] memory results, address resolverAddress) {\\n        (Resolver resolver, ) = findResolver(name);\\n        resolverAddress = address(resolver);\\n        if (resolverAddress == address(0)) {\\n            return (results, address(0));\\n        }\\n\\n        results = _multicall(\\n            MulticallData(\\n                name,\\n                data,\\n                gateways,\\n                callbackFunction,\\n                resolverAddress,\\n                metaData,\\n                new bool[](data.length)\\n            )\\n        );\\n    }\\n\\n    function reverse(bytes calldata reverseName)\\n        external\\n        view\\n        returns (\\n            string memory,\\n            address,\\n            address,\\n            address\\n        )\\n    {\\n        return reverse(reverseName, batchGatewayURLs);\\n    }\\n\\n    /**\\n     * @dev Performs ENS name reverse resolution for the supplied reverse name.\\n     * @param reverseName The reverse name to resolve, in normalised and DNS-encoded form. e.g. b6E040C9ECAaE172a89bD561c5F73e1C48d28cd9.addr.reverse\\n     * @return The resolved name, the resolved address, the reverse resolver address, and the resolver address.\\n     */\\n    function reverse(bytes calldata reverseName, string[] memory gateways)\\n        public\\n        view\\n        returns (\\n            string memory,\\n            address,\\n            address,\\n            address\\n        )\\n    {\\n        bytes memory encodedCall = abi.encodeCall(\\n            INameResolver.name,\\n            reverseName.namehash(0)\\n        );\\n        (\\n            bytes memory resolvedReverseData,\\n            address reverseResolverAddress\\n        ) = _resolveSingle(\\n                reverseName,\\n                encodedCall,\\n                gateways,\\n                this.reverseCallback.selector,\\n                \\\"\\\"\\n            );\\n\\n        return\\n            getForwardDataFromReverse(\\n                resolvedReverseData,\\n                reverseResolverAddress,\\n                gateways\\n            );\\n    }\\n\\n    function getForwardDataFromReverse(\\n        bytes memory resolvedReverseData,\\n        address reverseResolverAddress,\\n        string[] memory gateways\\n    )\\n        internal\\n        view\\n        returns (\\n            string memory,\\n            address,\\n            address,\\n            address\\n        )\\n    {\\n        string memory resolvedName = abi.decode(resolvedReverseData, (string));\\n\\n        (bytes memory encodedName, bytes32 namehash) = resolvedName\\n            .dnsEncodeName();\\n\\n        bytes memory encodedCall = abi.encodeCall(IAddrResolver.addr, namehash);\\n        bytes memory metaData = abi.encode(\\n            resolvedName,\\n            reverseResolverAddress\\n        );\\n        (bytes memory resolvedData, address resolverAddress) = this\\n            ._resolveSingle(\\n                encodedName,\\n                encodedCall,\\n                gateways,\\n                this.reverseCallback.selector,\\n                metaData\\n            );\\n\\n        address resolvedAddress = abi.decode(resolvedData, (address));\\n\\n        return (\\n            resolvedName,\\n            resolvedAddress,\\n            reverseResolverAddress,\\n            resolverAddress\\n        );\\n    }\\n\\n    function resolveSingleCallback(\\n        bytes calldata response,\\n        bytes calldata extraData\\n    ) external view returns (bytes memory, address) {\\n        (bytes[] memory results, address resolver, , ) = _resolveCallback(\\n            response,\\n            extraData,\\n            this.resolveSingleCallback.selector\\n        );\\n        return (results[0], resolver);\\n    }\\n\\n    function resolveCallback(bytes calldata response, bytes calldata extraData)\\n        external\\n        view\\n        returns (bytes[] memory, address)\\n    {\\n        (bytes[] memory results, address resolver, , ) = _resolveCallback(\\n            response,\\n            extraData,\\n            this.resolveCallback.selector\\n        );\\n        return (results, resolver);\\n    }\\n\\n    function reverseCallback(bytes calldata response, bytes calldata extraData)\\n        external\\n        view\\n        returns (\\n            string memory,\\n            address,\\n            address,\\n            address\\n        )\\n    {\\n        (\\n            bytes[] memory resolvedData,\\n            address resolverAddress,\\n            string[] memory gateways,\\n            bytes memory metaData\\n        ) = _resolveCallback(\\n                response,\\n                extraData,\\n                this.reverseCallback.selector\\n            );\\n\\n        if (metaData.length > 0) {\\n            (string memory resolvedName, address reverseResolverAddress) = abi\\n                .decode(metaData, (string, address));\\n            address resolvedAddress = abi.decode(resolvedData[0], (address));\\n            return (\\n                resolvedName,\\n                resolvedAddress,\\n                reverseResolverAddress,\\n                resolverAddress\\n            );\\n        }\\n\\n        return\\n            getForwardDataFromReverse(\\n                resolvedData[0],\\n                resolverAddress,\\n                gateways\\n            );\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IExtendedResolver).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    function _resolveCallback(\\n        bytes calldata response,\\n        bytes calldata extraData,\\n        bytes4 callbackFunction\\n    )\\n        internal\\n        view\\n        returns (\\n            bytes[] memory,\\n            address,\\n            string[] memory,\\n            bytes memory\\n        )\\n    {\\n        MulticallData memory multicallData;\\n        multicallData.callbackFunction = callbackFunction;\\n        (bool[] memory failures, bytes[] memory responses) = abi.decode(\\n            response,\\n            (bool[], bytes[])\\n        );\\n        OffchainLookupExtraData[] memory extraDatas;\\n        (\\n            multicallData.resolver,\\n            multicallData.gateways,\\n            multicallData.metaData,\\n            extraDatas\\n        ) = abi.decode(\\n            extraData,\\n            (address, string[], bytes, OffchainLookupExtraData[])\\n        );\\n        require(responses.length <= extraDatas.length);\\n        multicallData.data = new bytes[](extraDatas.length);\\n        multicallData.failures = new bool[](extraDatas.length);\\n        uint256 offchainCount = 0;\\n        for (uint256 i = 0; i < extraDatas.length; i++) {\\n            if (extraDatas[i].callbackFunction == bytes4(0)) {\\n                // This call did not require an offchain lookup; use the previous input data.\\n                multicallData.data[i] = extraDatas[i].data;\\n            } else {\\n                if (failures[offchainCount]) {\\n                    multicallData.failures[i] = true;\\n                    multicallData.data[i] = responses[offchainCount];\\n                } else {\\n                    multicallData.data[i] = abi.encodeWithSelector(\\n                        extraDatas[i].callbackFunction,\\n                        responses[offchainCount],\\n                        extraDatas[i].data\\n                    );\\n                }\\n                offchainCount = offchainCount + 1;\\n            }\\n        }\\n\\n        return (\\n            _multicall(multicallData),\\n            multicallData.resolver,\\n            multicallData.gateways,\\n            multicallData.metaData\\n        );\\n    }\\n\\n    /**\\n     * @dev Makes a call to `target` with `data`. If the call reverts with an `OffchainLookup` error, wraps\\n     *      the error with the data necessary to continue the request where it left off.\\n     * @param target The address to call.\\n     * @param data The data to call `target` with.\\n     * @return offchain Whether the call reverted with an `OffchainLookup` error.\\n     * @return returnData If `target` did not revert, contains the return data from the call to `target`. Otherwise, contains a `OffchainLookupCallData` struct.\\n     * @return extraData If `target` did not revert, is empty. Otherwise, contains a `OffchainLookupExtraData` struct.\\n     * @return result Whether the call succeeded.\\n     */\\n    function callWithOffchainLookupPropagation(\\n        address target,\\n        bytes memory data\\n    )\\n        internal\\n        view\\n        returns (\\n            bool offchain,\\n            bytes memory returnData,\\n            OffchainLookupExtraData memory extraData,\\n            bool result\\n        )\\n    {\\n        result = LowLevelCallUtils.functionStaticCall(address(target), data);\\n        uint256 size = LowLevelCallUtils.returnDataSize();\\n\\n        if (result) {\\n            return (\\n                false,\\n                LowLevelCallUtils.readReturnData(0, size),\\n                extraData,\\n                true\\n            );\\n        }\\n\\n        // Failure\\n        if (size >= 4) {\\n            bytes memory errorId = LowLevelCallUtils.readReturnData(0, 4);\\n            // Offchain lookup. Decode the revert message and create our own that nests it.\\n            bytes memory revertData = LowLevelCallUtils.readReturnData(\\n                4,\\n                size - 4\\n            );\\n            if (bytes4(errorId) == OffchainLookup.selector) {\\n                (\\n                    address wrappedSender,\\n                    string[] memory wrappedUrls,\\n                    bytes memory wrappedCallData,\\n                    bytes4 wrappedCallbackFunction,\\n                    bytes memory wrappedExtraData\\n                ) = abi.decode(\\n                        revertData,\\n                        (address, string[], bytes, bytes4, bytes)\\n                    );\\n                if (wrappedSender == target) {\\n                    returnData = abi.encode(\\n                        OffchainLookupCallData(\\n                            wrappedSender,\\n                            wrappedUrls,\\n                            wrappedCallData\\n                        )\\n                    );\\n                    extraData = OffchainLookupExtraData(\\n                        wrappedCallbackFunction,\\n                        wrappedExtraData\\n                    );\\n                    return (true, returnData, extraData, false);\\n                }\\n            } else {\\n                returnData = revertData;\\n                return (false, returnData, extraData, false);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Finds a resolver by recursively querying the registry, starting at the longest name and progressively\\n     *      removing labels until it finds a result.\\n     * @param name The name to resolve, in DNS-encoded and normalised form.\\n     * @return The Resolver responsible for this name, and the namehash of the full name.\\n     */\\n    function findResolver(bytes calldata name)\\n        public\\n        view\\n        returns (Resolver, bytes32)\\n    {\\n        (address resolver, bytes32 labelhash) = findResolver(name, 0);\\n        return (Resolver(resolver), labelhash);\\n    }\\n\\n    function findResolver(bytes calldata name, uint256 offset)\\n        internal\\n        view\\n        returns (address, bytes32)\\n    {\\n        uint256 labelLength = uint256(uint8(name[offset]));\\n        if (labelLength == 0) {\\n            return (address(0), bytes32(0));\\n        }\\n        uint256 nextLabel = offset + labelLength + 1;\\n        bytes32 labelHash = keccak256(name[offset + 1:nextLabel]);\\n        (address parentresolver, bytes32 parentnode) = findResolver(\\n            name,\\n            nextLabel\\n        );\\n        bytes32 node = keccak256(abi.encodePacked(parentnode, labelHash));\\n        address resolver = registry.resolver(node);\\n        if (resolver != address(0)) {\\n            return (resolver, node);\\n        }\\n        return (parentresolver, node);\\n    }\\n\\n    function _hasExtendedResolver(\\n        address resolver\\n    ) internal view returns (bool) {\\n        try\\n            Resolver(resolver).supportsInterface(\\n                type(IExtendedResolver).interfaceId\\n            )\\n        returns (bool supported) {\\n            return supported;\\n        } catch {\\n            return false;\\n        }\\n    }\\n\\n    function _multicall(MulticallData memory multicallData)\\n        internal\\n        view\\n        returns (bytes[] memory results)\\n    {\\n        uint256 length = multicallData.data.length;\\n        uint256 offchainCount = 0;\\n        OffchainLookupCallData[]\\n            memory callDatas = new OffchainLookupCallData[](length);\\n        OffchainLookupExtraData[]\\n            memory extraDatas = new OffchainLookupExtraData[](length);\\n        results = new bytes[](length);\\n        bool isCallback = multicallData.name.length == 0;\\n        bool hasExtendedResolver = _hasExtendedResolver(multicallData.resolver);\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            bytes memory item = multicallData.data[i];\\n            bool failure = multicallData.failures[i];\\n            if (failure) {\\n                results[i] = item;\\n                continue;\\n            }\\n            if (!isCallback && hasExtendedResolver) {\\n                item = abi.encodeCall(\\n                    IExtendedResolver.resolve,\\n                    (multicallData.name, item)\\n                );\\n            }\\n            (\\n                bool offchain,\\n                bytes memory returnData,\\n                OffchainLookupExtraData memory extraData,\\n                bool success\\n            ) = callWithOffchainLookupPropagation(multicallData.resolver, item);\\n\\n            if (offchain) {\\n                callDatas[offchainCount] = abi.decode(\\n                    returnData,\\n                    (OffchainLookupCallData)\\n                );\\n                extraDatas[i] = extraData;\\n                offchainCount += 1;\\n                continue;\\n            }\\n\\n            if (success && hasExtendedResolver) {\\n                // if this is a successful resolve() call, unwrap the result\\n                returnData = abi.decode(returnData, (bytes));\\n            }\\n            results[i] = returnData;\\n            extraDatas[i].data = multicallData.data[i];\\n        }\\n\\n        if (offchainCount == 0) {\\n            return results;\\n        }\\n\\n        // Trim callDatas if offchain data exists\\n        assembly {\\n            mstore(callDatas, offchainCount)\\n        }\\n\\n        revert OffchainLookup(\\n            address(this),\\n            multicallData.gateways,\\n            abi.encodeWithSelector(BatchGateway.query.selector, callDatas),\\n            multicallData.callbackFunction,\\n            abi.encode(\\n                multicallData.resolver,\\n                multicallData.gateways,\\n                multicallData.metaData,\\n                extraDatas\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xe8bd9fa349753d59a858840a98f39deea6aac0922aae8243d9bb28428efd6c0c\",\"license\":\"MIT\"},\"contracts/wrapper/BytesUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\nlibrary BytesUtils {\\n    /*\\n     * @dev Returns the keccak-256 hash of a byte range.\\n     * @param self The byte string to hash.\\n     * @param offset The position to start hashing at.\\n     * @param len The number of bytes to hash.\\n     * @return The hash of the byte range.\\n     */\\n    function keccak(\\n        bytes memory self,\\n        uint256 offset,\\n        uint256 len\\n    ) internal pure returns (bytes32 ret) {\\n        require(offset + len <= self.length);\\n        assembly {\\n            ret := keccak256(add(add(self, 32), offset), len)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the ENS namehash of a DNS-encoded name.\\n     * @param self The DNS-encoded name to hash.\\n     * @param offset The offset at which to start hashing.\\n     * @return The namehash of the name.\\n     */\\n    function namehash(bytes memory self, uint256 offset)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        (bytes32 labelhash, uint256 newOffset) = readLabel(self, offset);\\n        if (labelhash == bytes32(0)) {\\n            require(offset == self.length - 1, \\\"namehash: Junk at end of name\\\");\\n            return bytes32(0);\\n        }\\n        return\\n            keccak256(abi.encodePacked(namehash(self, newOffset), labelhash));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak-256 hash of a DNS-encoded label, and the offset to the start of the next label.\\n     * @param self The byte string to read a label from.\\n     * @param idx The index to read a label at.\\n     * @return labelhash The hash of the label at the specified index, or 0 if it is the last label.\\n     * @return newIdx The index of the start of the next label.\\n     */\\n    function readLabel(bytes memory self, uint256 idx)\\n        internal\\n        pure\\n        returns (bytes32 labelhash, uint256 newIdx)\\n    {\\n        require(idx < self.length, \\\"readLabel: Index out of bounds\\\");\\n        uint256 len = uint256(uint8(self[idx]));\\n        if (len > 0) {\\n            labelhash = keccak(self, idx + 1, len);\\n        } else {\\n            labelhash = bytes32(0);\\n        }\\n        newIdx = idx + len + 1;\\n    }\\n}\\n\",\"keccak256\":\"0xc0d13fcaccd6c3af927106b2ea48eec83c5d0a18d608bde013a53742ac058526\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620036d6380380620036d68339810160408190526200003491620001da565b6200003f336200006a565b6001600160a01b038216608052805162000061906001906020840190620000ba565b5050506200049c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b82805482825590600052602060002090810192821562000105579160200282015b82811115620001055782518290620000f49082620003d0565b5091602001919060010190620000db565b506200011392915062000117565b5090565b80821115620001135760006200012e828262000138565b5060010162000117565b508054620001469062000341565b6000825580601f1062000157575050565b601f0160209004906000526020600020908101906200017791906200017a565b50565b5b808211156200011357600081556001016200017b565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715620001d257620001d262000191565b604052919050565b6000806040808486031215620001ef57600080fd5b83516001600160a01b03811681146200020757600080fd5b602085810151919450906001600160401b03808211156200022757600080fd5b8187019150601f88818401126200023d57600080fd5b82518281111562000252576200025262000191565b8060051b62000263868201620001a7565b918252848101860191868101908c8411156200027e57600080fd5b87870192505b838310156200032e578251868111156200029e5760008081fd5b8701603f81018e13620002b15760008081fd5b8881015187811115620002c857620002c862000191565b620002db818801601f19168b01620001a7565b8181528f8c838501011115620002f15760008081fd5b60005b8281101562000311578381018d01518282018d01528b01620002f4565b5060009181018b0191909152835250918701919087019062000284565b8099505050505050505050509250929050565b600181811c908216806200035657607f821691505b6020821081036200037757634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620003cb57600081815260208120601f850160051c81016020861015620003a65750805b601f850160051c820191505b81811015620003c757828155600101620003b2565b5050505b505050565b81516001600160401b03811115620003ec57620003ec62000191565b6200040481620003fd845462000341565b846200037d565b602080601f8311600181146200043c5760008415620004235750858301515b600019600386901b1c1916600185901b178555620003c7565b600085815260208120601f198616915b828110156200046d578886015182559484019460019091019084016200044c565b50858210156200048c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b608051613217620004bf600039600081816101ea015261132401526132176000f3fe608060405234801561001057600080fd5b50600436106101365760003560e01c80638e5ea8df116100b2578063b241d0d311610081578063e0a8541211610066578063e0a85412146102e6578063ec11c823146102f9578063f2fde38b1461030c57600080fd5b8063b241d0d3146102c0578063b4a85801146102d357600080fd5b80638e5ea8df146102485780639061b9231461025b578063a1cbcbaf1461026e578063a6b16419146102a057600080fd5b8063715018a6116101095780637b103999116100ee5780637b103999146101e55780638da5cb5b146102245780638e25a0f31461023557600080fd5b8063715018a6146101c857806376286c00146101d257600080fd5b806301ffc9a71461013b5780630667cfea14610163578063206c74c9146101845780636dc4fb73146101a5575b600080fd5b61014e610149366004611ff0565b61031f565b60405190151581526020015b60405180910390f35b610176610171366004612210565b610388565b60405161015a9291906122ee565b610197610192366004612399565b6103bd565b60405161015a929190612402565b6101b86101b3366004612495565b6104ab565b60405161015a9493929190612501565b6101d0610591565b005b6101976101e036600461253d565b6105a5565b61020c7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161015a565b6000546001600160a01b031661020c565b61017661024336600461259c565b6105cd565b6101d0610256366004612662565b610663565b61017661026936600461269f565b610682565b61028161027c3660046126fe565b61077b565b604080516001600160a01b03909316835260208301919091520161015a565b6102b36102ae366004612740565b61079c565b60405161015a9190612759565b6101b86102ce36600461276c565b610848565b6101976102e1366004612495565b610952565b6101766102f4366004612495565b610996565b6101b86103073660046126fe565b6109fa565b6101d061031a3660046127e0565b610aef565b60006001600160e01b031982167f9061b92300000000000000000000000000000000000000000000000000000000148061038257507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b606060006103b08686868663e0a8541260e01b604051806020016040528060008152506105cd565b9150915094509492505050565b6060600061049e8585856001805480602002602001604051908101604052809291908181526020016000905b82821015610495578382906000526020600020018054610408906127fd565b80601f0160208091040260200160405190810160405280929190818152602001828054610434906127fd565b80156104815780601f1061045657610100808354040283529160200191610481565b820191906000526020600020905b81548152906001019060200180831161046457829003601f168201915b5050505050815260200190600101906103e9565b505050506105a5565b915091505b935093915050565b606060008080808080806104e28c8c8c8c7f6dc4fb7300000000000000000000000000000000000000000000000000000000610b84565b9350935093509350600081511115610554576000808280602001905181019061050b919061287c565b91509150600086600081518110610524576105246128ce565b602002602001015180602001905181019061053f91906128e4565b929a5091985096509294506105869350505050565b6105798460008151811061056a5761056a6128ce565b60200260200101518484610ef8565b9750975097509750505050505b945094509450949050565b610599611059565b6105a360006110b3565b565b606060006103b08686868663b4a8580160e01b6040518060200160405280600081525061111b565b6040805160018082528183019092526060916000918291816020015b60608152602001906001900390816105e95790505090508681600081518110610614576106146128ce565b60200260200101819052506000806106308b8b858b8b8b61111b565b9150915081600081518110610647576106476128ce565b602002602001015181945094505050505b965096945050505050565b61066b611059565b805161067e906001906020840190611f1d565b5050565b6060600061049e8585856001805480602002602001604051908101604052809291908181526020016000905b8282101561075a5783829060005260206000200180546106cd906127fd565b80601f01602080910402602001604051908101604052809291908181526020018280546106f9906127fd565b80156107465780601f1061071b57610100808354040283529160200191610746565b820191906000526020600020905b81548152906001019060200180831161072957829003601f168201915b5050505050815260200190600101906106ae565b5050505063e0a8541260e01b604051806020016040528060008152506105cd565b60008060008061078d8686600061121e565b909450925050505b9250929050565b600181815481106107ac57600080fd5b9060005260206000200160009150905080546107c7906127fd565b80601f01602080910402602001604051908101604052809291908181526020018280546107f3906127fd565b80156108405780601f1061081557610100808354040283529160200191610840565b820191906000526020600020905b81548152906001019060200180831161082357829003601f168201915b505050505081565b6060600080600080610894600089898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506113c19050565b6040516024016108a691815260200190565b60408051601f19818403018152918152602080830180516001600160e01b03167f691f34310000000000000000000000000000000000000000000000000000000017905281519081019091526000808252919250819061092f908b908b9086908c907f6dc4fb7300000000000000000000000000000000000000000000000000000000906105cd565b9150915061093e82828a610ef8565b965096509650965050505093509350935093565b606060008080610985888888887fb4a8580100000000000000000000000000000000000000000000000000000000610b84565b50919a909950975050505050505050565b6060600080806109c9888888887fe0a8541200000000000000000000000000000000000000000000000000000000610b84565b505091509150816000815181106109e2576109e26128ce565b60200260200101518193509350505094509492505050565b60606000806000610add86866001805480602002602001604051908101604052809291908181526020016000905b82821015610ad4578382906000526020600020018054610a47906127fd565b80601f0160208091040260200160405190810160405280929190818152602001828054610a73906127fd565b8015610ac05780601f10610a9557610100808354040283529160200191610ac0565b820191906000526020600020905b815481529060010190602001808311610aa357829003601f168201915b505050505081526020019060010190610a28565b50505050610848565b93509350935093505b92959194509250565b610af7611059565b6001600160a01b038116610b785760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b610b81816110b3565b50565b60606000606080610bde6040518060e0016040528060608152602001606081526020016060815260200160006001600160e01b031916815260200160006001600160a01b0316815260200160608152602001606081525090565b6001600160e01b031986166060820152600080610bfd8b8d018d61290f565b90925090506060610c108a8c018c6129c7565b60a088019190915260408701919091526001600160a01b039091166080860152805183519192501015610c4257600080fd5b805167ffffffffffffffff811115610c5c57610c5c612056565b604051908082528060200260200182016040528015610c8f57816020015b6060815260200190600190039081610c7a5790505b506020850152805167ffffffffffffffff811115610caf57610caf612056565b604051908082528060200260200182016040528015610cd8578160200160208202803683370190505b5060c08501526000805b8251811015610ec6578251600090849083908110610d0257610d026128ce565b6020026020010151600001516001600160e01b03191603610d6157828181518110610d2f57610d2f6128ce565b60200260200101516020015186602001518281518110610d5157610d516128ce565b6020026020010181905250610eb4565b848281518110610d7357610d736128ce565b602002602001015115610dea5760018660c001518281518110610d9857610d986128ce565b602002602001019015159081151581525050838281518110610dbc57610dbc6128ce565b602002602001015186602001518281518110610dda57610dda6128ce565b6020026020010181905250610ea6565b828181518110610dfc57610dfc6128ce565b602002602001015160000151848381518110610e1a57610e1a6128ce565b6020026020010151848381518110610e3457610e346128ce565b602002602001015160200151604051602401610e51929190612b26565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b03838183161783525050505086602001518281518110610e9a57610e9a6128ce565b60200260200101819052505b610eb1826001612b6a565b91505b80610ebe81612b7d565b915050610ce2565b50610ed085611480565b856080015186604001518760a001519850985098509850505050505095509550955095915050565b606060008060008087806020019051810190610f149190612b97565b9050600080610f22836118b0565b91509150600081604051602401610f3b91815260200190565b60408051601f19818403018152918152602080830180516001600160e01b03167f3b3b57de000000000000000000000000000000000000000000000000000000001790529051919250600091610f959187918e91016122ee565b6040516020818303038152906040529050600080306001600160a01b0316638e25a0f387868f636dc4fb7360e01b886040518663ffffffff1660e01b8152600401610fe4959493929190612c21565b600060405180830381865afa158015611001573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611029919081019061287c565b9150915060008280602001905181019061104391906128e4565b979f979e50909b50959950505050505050505050565b6000546001600160a01b031633146105a35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b6f565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b606060008061112a898961077b565b5091508190506001600160a01b038116611148575060009050610658565b604080516101006020601f8c01819004028201810190925260e081018a8152611210928291908d908d9081908501838280828437600092019190915250505090825250602081018a9052604081018990526001600160e01b0319881660608201526001600160a01b038516608082015260a08101879052895160c09091019067ffffffffffffffff8111156111df576111df612056565b604051908082528060200260200182016040528015611208578160200160208202803683370190505b509052611480565b925050965096945050505050565b6000806000858585818110611235576112356128ce565b919091013560f81c91505060008190036112565750600091508190506104a3565b60006112628286612b6a565b61126d906001612b6a565b90506000878761127e886001612b6a565b61128a92859290612c8a565b604051611298929190612cb4565b604051809103902090506000806112b08a8a8661121e565b91509150600081846040516020016112d2929190918252602082015260400190565b60408051601f198184030181529082905280516020909101207f0178b8bf0000000000000000000000000000000000000000000000000000000082526004820181905291506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690630178b8bf90602401602060405180830381865afa15801561136b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138f91906128e4565b90506001600160a01b038116156113af57975095506104a3945050505050565b50919a91995090975050505050505050565b60008060006113d08585611b21565b90925090508161144257600185516113e89190612cc4565b84146114365760405162461bcd60e51b815260206004820152601d60248201527f6e616d65686173683a204a756e6b20617420656e64206f66206e616d650000006044820152606401610b6f565b50600091506103829050565b61144c85826113c1565b6040805160208101929092528101839052606001604051602081830303815290604052805190602001209250505092915050565b6020810151516060906000808267ffffffffffffffff8111156114a5576114a5612056565b60405190808252806020026020018201604052801561150357816020015b6114f0604051806060016040528060006001600160a01b0316815260200160608152602001606081525090565b8152602001906001900390816114c35790505b50905060008367ffffffffffffffff81111561152157611521612056565b60405190808252806020026020018201604052801561156757816020015b60408051808201909152600081526060602082015281526020019060019003908161153f5790505b5090508367ffffffffffffffff81111561158357611583612056565b6040519080825280602002602001820160405280156115b657816020015b60608152602001906001900390816115a15790505b50865151608088015191965015906000906115d090611bd8565b905060005b868110156117db576000896020015182815181106115f5576115f56128ce565b6020026020010151905060008a60c001518381518110611617576116176128ce565b60200260200101519050801561164c57818a848151811061163a5761163a6128ce565b602002602001018190525050506117c9565b841580156116575750835b156116b6578a5160405161167091908490602401612b26565b60408051601f198184030181529190526020810180516001600160e01b03167f9061b9230000000000000000000000000000000000000000000000000000000017905291505b6000806000806116ca8f6080015187611c80565b9350935093509350831561173f57828060200190518101906116ec9190612d57565b8b8d815181106116fe576116fe6128ce565b6020026020010181905250818a888151811061171c5761171c6128ce565b602090810291909101015261173260018d612b6a565b9b505050505050506117c9565b8080156117495750875b1561176557828060200190518101906117629190612b97565b92505b828e8881518110611778576117786128ce565b60200260200101819052508e602001518781518110611799576117996128ce565b60200260200101518a88815181106117b3576117b36128ce565b6020026020010151602001819052505050505050505b806117d381612b7d565b9150506115d5565b50846000036117ef57505050505050919050565b84845230886040015163a780bab660e01b866040516024016118119190612e52565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b0383818316178352505050508a606001518b608001518c604001518d60a001518960405160200161186c9493929190612ed2565b60408051601f19818403018152908290527f556f1830000000000000000000000000000000000000000000000000000000008252610b6f9594939291600401612f86565b8051606090600090819084906118c7816002612b6a565b67ffffffffffffffff8111156118df576118df612056565b6040519080825280601f01601f191660200182016040528015611909576020820181803683370190505b5094506000935080840361196657600060f81b8560008151811061192f5761192f6128ce565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350505050915091565b60001981015b82818151811061197e5761197e6128ce565b01602001517fff00000000000000000000000000000000000000000000000000000000000000167f2e0000000000000000000000000000000000000000000000000000000000000003611a58578360f81b8682600101815181106119e4576119e46128ce565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535084611a25846001840160ff8816611e12565b60408051602081019390935282015260600160405160208183030381529060405280519060200120945060009350611ac0565b600184019350828181518110611a7057611a706128ce565b602001015160f81c60f81b868260010181518110611a9057611a906128ce565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b8015611acf576000190161196c565b5083611ae083600060ff8716611e12565b6040805160208101939093528201526060016040516020818303038152906040528051906020012093508260f81b8560008151811061192f5761192f6128ce565b60008083518310611b745760405162461bcd60e51b815260206004820152601e60248201527f726561644c6162656c3a20496e646578206f7574206f6620626f756e647300006044820152606401610b6f565b6000848481518110611b8857611b886128ce565b016020015160f81c90508015611bb457611bad85611ba7866001612b6a565b83611e12565b9250611bb9565b600092505b611bc38185612b6a565b611bce906001612b6a565b9150509250929050565b6040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527f9061b9230000000000000000000000000000000000000000000000000000000060048201526000906001600160a01b038316906301ffc9a790602401602060405180830381865afa925050508015611c74575060408051601f3d908101601f19168201909252611c7191810190612fba565b60015b61038257506000919050565b60408051808201909152600080825260606020830181905290916000611ca68686611e36565b90503d8115611ccc576000611cbc600083611ec8565b909550935060019150610ae69050565b60048110611e08576000611ce260006004611ec8565b90506000611cfa6004611cf58186612cc4565b611ec8565b90507f556f183000000000000000000000000000000000000000000000000000000000611d2683612fd7565b6001600160e01b03191603611df457600080600080600085806020019051810190611d51919061300f565b945094509450945094508d6001600160a01b0316856001600160a01b031603611dea576040518060600160405280866001600160a01b0316815260200185815260200184815250604051602001611da891906130bf565b60408051601f198184030181528282019091526001600160e01b03199093168152602081019190915260019b50909950975060009650610ae695505050505050565b5050505050611e05565b600096509450859250610ae6915050565b50505b5092959194509250565b8251600090611e218385612b6a565b1115611e2c57600080fd5b5091016020012090565b60006001600160a01b0383163b611eb55760405162461bcd60e51b815260206004820152602e60248201527f4c6f774c6576656c43616c6c5574696c733a207374617469632063616c6c207460448201527f6f206e6f6e2d636f6e74726163740000000000000000000000000000000000006064820152608401610b6f565b600080835160208501865afa9392505050565b60608167ffffffffffffffff811115611ee357611ee3612056565b6040519080825280601f01601f191660200182016040528015611f0d576020820181803683370190505b5090508183602083013e92915050565b828054828255906000526020600020908101928215611f63579160200282015b82811115611f635782518290611f539082613121565b5091602001919060010190611f3d565b50611f6f929150611f73565b5090565b80821115611f6f576000611f878282611f90565b50600101611f73565b508054611f9c906127fd565b6000825580601f10611fac575050565b601f016020900490600052602060002090810190610b8191905b80821115611f6f5760008155600101611fc6565b6001600160e01b031981168114610b8157600080fd5b60006020828403121561200257600080fd5b813561200d81611fda565b9392505050565b60008083601f84011261202657600080fd5b50813567ffffffffffffffff81111561203e57600080fd5b60208301915083602082850101111561079557600080fd5b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561208f5761208f612056565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156120be576120be612056565b604052919050565b600067ffffffffffffffff8211156120e0576120e0612056565b50601f01601f191660200190565b60006121016120fc846120c6565b612095565b905082815283838301111561211557600080fd5b828260208301376000602084830101529392505050565b600082601f83011261213d57600080fd5b61200d838335602085016120ee565b600067ffffffffffffffff82111561216657612166612056565b5060051b60200190565b600082601f83011261218157600080fd5b813560206121916120fc8361214c565b82815260059290921b840181019181810190868411156121b057600080fd5b8286015b8481101561220557803567ffffffffffffffff8111156121d45760008081fd5b8701603f810189136121e65760008081fd5b6121f78986830135604084016120ee565b8452509183019183016121b4565b509695505050505050565b6000806000806060858703121561222657600080fd5b843567ffffffffffffffff8082111561223e57600080fd5b61224a88838901612014565b9096509450602087013591508082111561226357600080fd5b61226f8883890161212c565b9350604087013591508082111561228557600080fd5b5061229287828801612170565b91505092959194509250565b60005b838110156122b95781810151838201526020016122a1565b50506000910152565b600081518084526122da81602086016020860161229e565b601f01601f19169290920160200192915050565b60408152600061230160408301856122c2565b90506001600160a01b03831660208301529392505050565b600082601f83011261232a57600080fd5b8135602061233a6120fc8361214c565b82815260059290921b8401810191818101908684111561235957600080fd5b8286015b8481101561220557803567ffffffffffffffff81111561237d5760008081fd5b61238b8986838b010161212c565b84525091830191830161235d565b6000806000604084860312156123ae57600080fd5b833567ffffffffffffffff808211156123c657600080fd5b6123d287838801612014565b909550935060208601359150808211156123eb57600080fd5b506123f886828701612319565b9150509250925092565b6000604082016040835280855180835260608501915060608160051b8601019250602080880160005b83811015612477577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa08887030185526124658683516122c2565b9550938201939082019060010161242b565b50508394506001600160a01b03871681870152505050509392505050565b600080600080604085870312156124ab57600080fd5b843567ffffffffffffffff808211156124c357600080fd5b6124cf88838901612014565b909650945060208701359150808211156124e857600080fd5b506124f587828801612014565b95989497509550505050565b60808152600061251460808301876122c2565b6001600160a01b0395861660208401529385166040830152509216606090920191909152919050565b6000806000806060858703121561255357600080fd5b843567ffffffffffffffff8082111561256b57600080fd5b61257788838901612014565b9096509450602087013591508082111561259057600080fd5b61226f88838901612319565b60008060008060008060a087890312156125b557600080fd5b863567ffffffffffffffff808211156125cd57600080fd5b6125d98a838b01612014565b909850965060208901359150808211156125f257600080fd5b6125fe8a838b0161212c565b9550604089013591508082111561261457600080fd5b6126208a838b01612170565b94506060890135915061263282611fda565b9092506080880135908082111561264857600080fd5b5061265589828a0161212c565b9150509295509295509295565b60006020828403121561267457600080fd5b813567ffffffffffffffff81111561268b57600080fd5b61269784828501612170565b949350505050565b6000806000604084860312156126b457600080fd5b833567ffffffffffffffff808211156126cc57600080fd5b6126d887838801612014565b909550935060208601359150808211156126f157600080fd5b506123f88682870161212c565b6000806020838503121561271157600080fd5b823567ffffffffffffffff81111561272857600080fd5b61273485828601612014565b90969095509350505050565b60006020828403121561275257600080fd5b5035919050565b60208152600061200d60208301846122c2565b60008060006040848603121561278157600080fd5b833567ffffffffffffffff8082111561279957600080fd5b6127a587838801612014565b909550935060208601359150808211156127be57600080fd5b506123f886828701612170565b6001600160a01b0381168114610b8157600080fd5b6000602082840312156127f257600080fd5b813561200d816127cb565b600181811c9082168061281157607f821691505b60208210810361283157634e487b7160e01b600052602260045260246000fd5b50919050565b600082601f83011261284857600080fd5b81516128566120fc826120c6565b81815284602083860101111561286b57600080fd5b61269782602083016020870161229e565b6000806040838503121561288f57600080fd5b825167ffffffffffffffff8111156128a657600080fd5b6128b285828601612837565b92505060208301516128c3816127cb565b809150509250929050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156128f657600080fd5b815161200d816127cb565b8015158114610b8157600080fd5b6000806040838503121561292257600080fd5b823567ffffffffffffffff8082111561293a57600080fd5b818501915085601f83011261294e57600080fd5b8135602061295e6120fc8361214c565b82815260059290921b8401810191818101908984111561297d57600080fd5b948201945b838610156129a457853561299581612901565b82529482019490820190612982565b965050860135925050808211156129ba57600080fd5b50611bce85828601612319565b600080600080608085870312156129dd57600080fd5b6129e785356127cb565b84359350602085013567ffffffffffffffff80821115612a0657600080fd5b612a1288838901612170565b94506040870135915080821115612a2857600080fd5b612a348883890161212c565b93506060870135915080821115612a4a57600080fd5b818701915087601f830112612a5e57600080fd5b8135612a6c6120fc8261214c565b8082825260208201915060208360051b86010192508a831115612a8e57600080fd5b602085015b83811015612b16578481351115612aa957600080fd5b803586016040601f19828f03011215612ac157600080fd5b612ac961206c565b6020820135612ad781611fda565b8152604082013587811115612aeb57600080fd5b612afa8f60208386010161212c565b6020830152508085525050602083019250602081019050612a93565b50979a9699509497505050505050565b604081526000612b3960408301856122c2565b8281036020840152612b4b81856122c2565b95945050505050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561038257610382612b54565b60006000198203612b9057612b90612b54565b5060010190565b600060208284031215612ba957600080fd5b815167ffffffffffffffff811115612bc057600080fd5b61269784828501612837565b600081518084526020808501808196508360051b8101915082860160005b85811015612c14578284038952612c028483516122c2565b98850198935090840190600101612bea565b5091979650505050505050565b60a081526000612c3460a08301886122c2565b8281036020840152612c4681886122c2565b90508281036040840152612c5a8187612bcc565b90506001600160e01b0319851660608401528281036080840152612c7e81856122c2565b98975050505050505050565b60008085851115612c9a57600080fd5b83861115612ca757600080fd5b5050820193919092039150565b8183823760009101908152919050565b8181038181111561038257610382612b54565b600082601f830112612ce857600080fd5b81516020612cf86120fc8361214c565b82815260059290921b84018101918181019086841115612d1757600080fd5b8286015b8481101561220557805167ffffffffffffffff811115612d3b5760008081fd5b612d498986838b0101612837565b845250918301918301612d1b565b600060208284031215612d6957600080fd5b815167ffffffffffffffff80821115612d8157600080fd5b9083019060608286031215612d9557600080fd5b604051606081018181108382111715612db057612db0612056565b6040528251612dbe816127cb565b8152602083015182811115612dd257600080fd5b612dde87828601612cd7565b602083015250604083015182811115612df657600080fd5b612e0287828601612837565b60408301525095945050505050565b6001600160a01b0381511682526000602082015160606020850152612e396060850182612bcc565b905060408301518482036040860152612b4b82826122c2565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015612ec5577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452612eb3858351612e11565b94509285019290850190600101612e79565b5092979650505050505050565b6001600160a01b038516815260006020608081840152612ef56080840187612bcc565b604084820381860152612f0882886122c2565b915084820360608601528186518084528484019150848160051b85010185890160005b83811015612f7457868303601f19018552815180516001600160e01b0319168452880151888401879052612f61878501826122c2565b9589019593505090870190600101612f2b565b50909c9b505050505050505050505050565b6001600160a01b038616815260a060208201526000612fa860a0830187612bcc565b8281036040840152612c5a81876122c2565b600060208284031215612fcc57600080fd5b815161200d81612901565b6000815160208301516001600160e01b0319808216935060048310156130075780818460040360031b1b83161693505b505050919050565b600080600080600060a0868803121561302757600080fd5b8551613032816127cb565b602087015190955067ffffffffffffffff8082111561305057600080fd5b61305c89838a01612cd7565b9550604088015191508082111561307257600080fd5b61307e89838a01612837565b94506060880151915061309082611fda565b6080880151919350808211156130a557600080fd5b506130b288828901612837565b9150509295509295909350565b60208152600061200d6020830184612e11565b601f82111561311c57600081815260208120601f850160051c810160208610156130f95750805b601f850160051c820191505b8181101561311857828155600101613105565b5050505b505050565b815167ffffffffffffffff81111561313b5761313b612056565b61314f8161314984546127fd565b846130d2565b602080601f831160018114613184576000841561316c5750858301515b600019600386901b1c1916600185901b178555613118565b600085815260208120601f198616915b828110156131b357888601518255948401946001909101908401613194565b50858210156131d15787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea2646970667358221220cbb43b54f332c6c7c4ea5ce59ae7fc892eff68ed04070f7704abf3af090a030064736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101365760003560e01c80638e5ea8df116100b2578063b241d0d311610081578063e0a8541211610066578063e0a85412146102e6578063ec11c823146102f9578063f2fde38b1461030c57600080fd5b8063b241d0d3146102c0578063b4a85801146102d357600080fd5b80638e5ea8df146102485780639061b9231461025b578063a1cbcbaf1461026e578063a6b16419146102a057600080fd5b8063715018a6116101095780637b103999116100ee5780637b103999146101e55780638da5cb5b146102245780638e25a0f31461023557600080fd5b8063715018a6146101c857806376286c00146101d257600080fd5b806301ffc9a71461013b5780630667cfea14610163578063206c74c9146101845780636dc4fb73146101a5575b600080fd5b61014e610149366004611ff0565b61031f565b60405190151581526020015b60405180910390f35b610176610171366004612210565b610388565b60405161015a9291906122ee565b610197610192366004612399565b6103bd565b60405161015a929190612402565b6101b86101b3366004612495565b6104ab565b60405161015a9493929190612501565b6101d0610591565b005b6101976101e036600461253d565b6105a5565b61020c7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161015a565b6000546001600160a01b031661020c565b61017661024336600461259c565b6105cd565b6101d0610256366004612662565b610663565b61017661026936600461269f565b610682565b61028161027c3660046126fe565b61077b565b604080516001600160a01b03909316835260208301919091520161015a565b6102b36102ae366004612740565b61079c565b60405161015a9190612759565b6101b86102ce36600461276c565b610848565b6101976102e1366004612495565b610952565b6101766102f4366004612495565b610996565b6101b86103073660046126fe565b6109fa565b6101d061031a3660046127e0565b610aef565b60006001600160e01b031982167f9061b92300000000000000000000000000000000000000000000000000000000148061038257507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b606060006103b08686868663e0a8541260e01b604051806020016040528060008152506105cd565b9150915094509492505050565b6060600061049e8585856001805480602002602001604051908101604052809291908181526020016000905b82821015610495578382906000526020600020018054610408906127fd565b80601f0160208091040260200160405190810160405280929190818152602001828054610434906127fd565b80156104815780601f1061045657610100808354040283529160200191610481565b820191906000526020600020905b81548152906001019060200180831161046457829003601f168201915b5050505050815260200190600101906103e9565b505050506105a5565b915091505b935093915050565b606060008080808080806104e28c8c8c8c7f6dc4fb7300000000000000000000000000000000000000000000000000000000610b84565b9350935093509350600081511115610554576000808280602001905181019061050b919061287c565b91509150600086600081518110610524576105246128ce565b602002602001015180602001905181019061053f91906128e4565b929a5091985096509294506105869350505050565b6105798460008151811061056a5761056a6128ce565b60200260200101518484610ef8565b9750975097509750505050505b945094509450949050565b610599611059565b6105a360006110b3565b565b606060006103b08686868663b4a8580160e01b6040518060200160405280600081525061111b565b6040805160018082528183019092526060916000918291816020015b60608152602001906001900390816105e95790505090508681600081518110610614576106146128ce565b60200260200101819052506000806106308b8b858b8b8b61111b565b9150915081600081518110610647576106476128ce565b602002602001015181945094505050505b965096945050505050565b61066b611059565b805161067e906001906020840190611f1d565b5050565b6060600061049e8585856001805480602002602001604051908101604052809291908181526020016000905b8282101561075a5783829060005260206000200180546106cd906127fd565b80601f01602080910402602001604051908101604052809291908181526020018280546106f9906127fd565b80156107465780601f1061071b57610100808354040283529160200191610746565b820191906000526020600020905b81548152906001019060200180831161072957829003601f168201915b5050505050815260200190600101906106ae565b5050505063e0a8541260e01b604051806020016040528060008152506105cd565b60008060008061078d8686600061121e565b909450925050505b9250929050565b600181815481106107ac57600080fd5b9060005260206000200160009150905080546107c7906127fd565b80601f01602080910402602001604051908101604052809291908181526020018280546107f3906127fd565b80156108405780601f1061081557610100808354040283529160200191610840565b820191906000526020600020905b81548152906001019060200180831161082357829003601f168201915b505050505081565b6060600080600080610894600089898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506113c19050565b6040516024016108a691815260200190565b60408051601f19818403018152918152602080830180516001600160e01b03167f691f34310000000000000000000000000000000000000000000000000000000017905281519081019091526000808252919250819061092f908b908b9086908c907f6dc4fb7300000000000000000000000000000000000000000000000000000000906105cd565b9150915061093e82828a610ef8565b965096509650965050505093509350935093565b606060008080610985888888887fb4a8580100000000000000000000000000000000000000000000000000000000610b84565b50919a909950975050505050505050565b6060600080806109c9888888887fe0a8541200000000000000000000000000000000000000000000000000000000610b84565b505091509150816000815181106109e2576109e26128ce565b60200260200101518193509350505094509492505050565b60606000806000610add86866001805480602002602001604051908101604052809291908181526020016000905b82821015610ad4578382906000526020600020018054610a47906127fd565b80601f0160208091040260200160405190810160405280929190818152602001828054610a73906127fd565b8015610ac05780601f10610a9557610100808354040283529160200191610ac0565b820191906000526020600020905b815481529060010190602001808311610aa357829003601f168201915b505050505081526020019060010190610a28565b50505050610848565b93509350935093505b92959194509250565b610af7611059565b6001600160a01b038116610b785760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b610b81816110b3565b50565b60606000606080610bde6040518060e0016040528060608152602001606081526020016060815260200160006001600160e01b031916815260200160006001600160a01b0316815260200160608152602001606081525090565b6001600160e01b031986166060820152600080610bfd8b8d018d61290f565b90925090506060610c108a8c018c6129c7565b60a088019190915260408701919091526001600160a01b039091166080860152805183519192501015610c4257600080fd5b805167ffffffffffffffff811115610c5c57610c5c612056565b604051908082528060200260200182016040528015610c8f57816020015b6060815260200190600190039081610c7a5790505b506020850152805167ffffffffffffffff811115610caf57610caf612056565b604051908082528060200260200182016040528015610cd8578160200160208202803683370190505b5060c08501526000805b8251811015610ec6578251600090849083908110610d0257610d026128ce565b6020026020010151600001516001600160e01b03191603610d6157828181518110610d2f57610d2f6128ce565b60200260200101516020015186602001518281518110610d5157610d516128ce565b6020026020010181905250610eb4565b848281518110610d7357610d736128ce565b602002602001015115610dea5760018660c001518281518110610d9857610d986128ce565b602002602001019015159081151581525050838281518110610dbc57610dbc6128ce565b602002602001015186602001518281518110610dda57610dda6128ce565b6020026020010181905250610ea6565b828181518110610dfc57610dfc6128ce565b602002602001015160000151848381518110610e1a57610e1a6128ce565b6020026020010151848381518110610e3457610e346128ce565b602002602001015160200151604051602401610e51929190612b26565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b03838183161783525050505086602001518281518110610e9a57610e9a6128ce565b60200260200101819052505b610eb1826001612b6a565b91505b80610ebe81612b7d565b915050610ce2565b50610ed085611480565b856080015186604001518760a001519850985098509850505050505095509550955095915050565b606060008060008087806020019051810190610f149190612b97565b9050600080610f22836118b0565b91509150600081604051602401610f3b91815260200190565b60408051601f19818403018152918152602080830180516001600160e01b03167f3b3b57de000000000000000000000000000000000000000000000000000000001790529051919250600091610f959187918e91016122ee565b6040516020818303038152906040529050600080306001600160a01b0316638e25a0f387868f636dc4fb7360e01b886040518663ffffffff1660e01b8152600401610fe4959493929190612c21565b600060405180830381865afa158015611001573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611029919081019061287c565b9150915060008280602001905181019061104391906128e4565b979f979e50909b50959950505050505050505050565b6000546001600160a01b031633146105a35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b6f565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b606060008061112a898961077b565b5091508190506001600160a01b038116611148575060009050610658565b604080516101006020601f8c01819004028201810190925260e081018a8152611210928291908d908d9081908501838280828437600092019190915250505090825250602081018a9052604081018990526001600160e01b0319881660608201526001600160a01b038516608082015260a08101879052895160c09091019067ffffffffffffffff8111156111df576111df612056565b604051908082528060200260200182016040528015611208578160200160208202803683370190505b509052611480565b925050965096945050505050565b6000806000858585818110611235576112356128ce565b919091013560f81c91505060008190036112565750600091508190506104a3565b60006112628286612b6a565b61126d906001612b6a565b90506000878761127e886001612b6a565b61128a92859290612c8a565b604051611298929190612cb4565b604051809103902090506000806112b08a8a8661121e565b91509150600081846040516020016112d2929190918252602082015260400190565b60408051601f198184030181529082905280516020909101207f0178b8bf0000000000000000000000000000000000000000000000000000000082526004820181905291506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690630178b8bf90602401602060405180830381865afa15801561136b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138f91906128e4565b90506001600160a01b038116156113af57975095506104a3945050505050565b50919a91995090975050505050505050565b60008060006113d08585611b21565b90925090508161144257600185516113e89190612cc4565b84146114365760405162461bcd60e51b815260206004820152601d60248201527f6e616d65686173683a204a756e6b20617420656e64206f66206e616d650000006044820152606401610b6f565b50600091506103829050565b61144c85826113c1565b6040805160208101929092528101839052606001604051602081830303815290604052805190602001209250505092915050565b6020810151516060906000808267ffffffffffffffff8111156114a5576114a5612056565b60405190808252806020026020018201604052801561150357816020015b6114f0604051806060016040528060006001600160a01b0316815260200160608152602001606081525090565b8152602001906001900390816114c35790505b50905060008367ffffffffffffffff81111561152157611521612056565b60405190808252806020026020018201604052801561156757816020015b60408051808201909152600081526060602082015281526020019060019003908161153f5790505b5090508367ffffffffffffffff81111561158357611583612056565b6040519080825280602002602001820160405280156115b657816020015b60608152602001906001900390816115a15790505b50865151608088015191965015906000906115d090611bd8565b905060005b868110156117db576000896020015182815181106115f5576115f56128ce565b6020026020010151905060008a60c001518381518110611617576116176128ce565b60200260200101519050801561164c57818a848151811061163a5761163a6128ce565b602002602001018190525050506117c9565b841580156116575750835b156116b6578a5160405161167091908490602401612b26565b60408051601f198184030181529190526020810180516001600160e01b03167f9061b9230000000000000000000000000000000000000000000000000000000017905291505b6000806000806116ca8f6080015187611c80565b9350935093509350831561173f57828060200190518101906116ec9190612d57565b8b8d815181106116fe576116fe6128ce565b6020026020010181905250818a888151811061171c5761171c6128ce565b602090810291909101015261173260018d612b6a565b9b505050505050506117c9565b8080156117495750875b1561176557828060200190518101906117629190612b97565b92505b828e8881518110611778576117786128ce565b60200260200101819052508e602001518781518110611799576117996128ce565b60200260200101518a88815181106117b3576117b36128ce565b6020026020010151602001819052505050505050505b806117d381612b7d565b9150506115d5565b50846000036117ef57505050505050919050565b84845230886040015163a780bab660e01b866040516024016118119190612e52565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b0383818316178352505050508a606001518b608001518c604001518d60a001518960405160200161186c9493929190612ed2565b60408051601f19818403018152908290527f556f1830000000000000000000000000000000000000000000000000000000008252610b6f9594939291600401612f86565b8051606090600090819084906118c7816002612b6a565b67ffffffffffffffff8111156118df576118df612056565b6040519080825280601f01601f191660200182016040528015611909576020820181803683370190505b5094506000935080840361196657600060f81b8560008151811061192f5761192f6128ce565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350505050915091565b60001981015b82818151811061197e5761197e6128ce565b01602001517fff00000000000000000000000000000000000000000000000000000000000000167f2e0000000000000000000000000000000000000000000000000000000000000003611a58578360f81b8682600101815181106119e4576119e46128ce565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535084611a25846001840160ff8816611e12565b60408051602081019390935282015260600160405160208183030381529060405280519060200120945060009350611ac0565b600184019350828181518110611a7057611a706128ce565b602001015160f81c60f81b868260010181518110611a9057611a906128ce565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b8015611acf576000190161196c565b5083611ae083600060ff8716611e12565b6040805160208101939093528201526060016040516020818303038152906040528051906020012093508260f81b8560008151811061192f5761192f6128ce565b60008083518310611b745760405162461bcd60e51b815260206004820152601e60248201527f726561644c6162656c3a20496e646578206f7574206f6620626f756e647300006044820152606401610b6f565b6000848481518110611b8857611b886128ce565b016020015160f81c90508015611bb457611bad85611ba7866001612b6a565b83611e12565b9250611bb9565b600092505b611bc38185612b6a565b611bce906001612b6a565b9150509250929050565b6040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527f9061b9230000000000000000000000000000000000000000000000000000000060048201526000906001600160a01b038316906301ffc9a790602401602060405180830381865afa925050508015611c74575060408051601f3d908101601f19168201909252611c7191810190612fba565b60015b61038257506000919050565b60408051808201909152600080825260606020830181905290916000611ca68686611e36565b90503d8115611ccc576000611cbc600083611ec8565b909550935060019150610ae69050565b60048110611e08576000611ce260006004611ec8565b90506000611cfa6004611cf58186612cc4565b611ec8565b90507f556f183000000000000000000000000000000000000000000000000000000000611d2683612fd7565b6001600160e01b03191603611df457600080600080600085806020019051810190611d51919061300f565b945094509450945094508d6001600160a01b0316856001600160a01b031603611dea576040518060600160405280866001600160a01b0316815260200185815260200184815250604051602001611da891906130bf565b60408051601f198184030181528282019091526001600160e01b03199093168152602081019190915260019b50909950975060009650610ae695505050505050565b5050505050611e05565b600096509450859250610ae6915050565b50505b5092959194509250565b8251600090611e218385612b6a565b1115611e2c57600080fd5b5091016020012090565b60006001600160a01b0383163b611eb55760405162461bcd60e51b815260206004820152602e60248201527f4c6f774c6576656c43616c6c5574696c733a207374617469632063616c6c207460448201527f6f206e6f6e2d636f6e74726163740000000000000000000000000000000000006064820152608401610b6f565b600080835160208501865afa9392505050565b60608167ffffffffffffffff811115611ee357611ee3612056565b6040519080825280601f01601f191660200182016040528015611f0d576020820181803683370190505b5090508183602083013e92915050565b828054828255906000526020600020908101928215611f63579160200282015b82811115611f635782518290611f539082613121565b5091602001919060010190611f3d565b50611f6f929150611f73565b5090565b80821115611f6f576000611f878282611f90565b50600101611f73565b508054611f9c906127fd565b6000825580601f10611fac575050565b601f016020900490600052602060002090810190610b8191905b80821115611f6f5760008155600101611fc6565b6001600160e01b031981168114610b8157600080fd5b60006020828403121561200257600080fd5b813561200d81611fda565b9392505050565b60008083601f84011261202657600080fd5b50813567ffffffffffffffff81111561203e57600080fd5b60208301915083602082850101111561079557600080fd5b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561208f5761208f612056565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156120be576120be612056565b604052919050565b600067ffffffffffffffff8211156120e0576120e0612056565b50601f01601f191660200190565b60006121016120fc846120c6565b612095565b905082815283838301111561211557600080fd5b828260208301376000602084830101529392505050565b600082601f83011261213d57600080fd5b61200d838335602085016120ee565b600067ffffffffffffffff82111561216657612166612056565b5060051b60200190565b600082601f83011261218157600080fd5b813560206121916120fc8361214c565b82815260059290921b840181019181810190868411156121b057600080fd5b8286015b8481101561220557803567ffffffffffffffff8111156121d45760008081fd5b8701603f810189136121e65760008081fd5b6121f78986830135604084016120ee565b8452509183019183016121b4565b509695505050505050565b6000806000806060858703121561222657600080fd5b843567ffffffffffffffff8082111561223e57600080fd5b61224a88838901612014565b9096509450602087013591508082111561226357600080fd5b61226f8883890161212c565b9350604087013591508082111561228557600080fd5b5061229287828801612170565b91505092959194509250565b60005b838110156122b95781810151838201526020016122a1565b50506000910152565b600081518084526122da81602086016020860161229e565b601f01601f19169290920160200192915050565b60408152600061230160408301856122c2565b90506001600160a01b03831660208301529392505050565b600082601f83011261232a57600080fd5b8135602061233a6120fc8361214c565b82815260059290921b8401810191818101908684111561235957600080fd5b8286015b8481101561220557803567ffffffffffffffff81111561237d5760008081fd5b61238b8986838b010161212c565b84525091830191830161235d565b6000806000604084860312156123ae57600080fd5b833567ffffffffffffffff808211156123c657600080fd5b6123d287838801612014565b909550935060208601359150808211156123eb57600080fd5b506123f886828701612319565b9150509250925092565b6000604082016040835280855180835260608501915060608160051b8601019250602080880160005b83811015612477577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa08887030185526124658683516122c2565b9550938201939082019060010161242b565b50508394506001600160a01b03871681870152505050509392505050565b600080600080604085870312156124ab57600080fd5b843567ffffffffffffffff808211156124c357600080fd5b6124cf88838901612014565b909650945060208701359150808211156124e857600080fd5b506124f587828801612014565b95989497509550505050565b60808152600061251460808301876122c2565b6001600160a01b0395861660208401529385166040830152509216606090920191909152919050565b6000806000806060858703121561255357600080fd5b843567ffffffffffffffff8082111561256b57600080fd5b61257788838901612014565b9096509450602087013591508082111561259057600080fd5b61226f88838901612319565b60008060008060008060a087890312156125b557600080fd5b863567ffffffffffffffff808211156125cd57600080fd5b6125d98a838b01612014565b909850965060208901359150808211156125f257600080fd5b6125fe8a838b0161212c565b9550604089013591508082111561261457600080fd5b6126208a838b01612170565b94506060890135915061263282611fda565b9092506080880135908082111561264857600080fd5b5061265589828a0161212c565b9150509295509295509295565b60006020828403121561267457600080fd5b813567ffffffffffffffff81111561268b57600080fd5b61269784828501612170565b949350505050565b6000806000604084860312156126b457600080fd5b833567ffffffffffffffff808211156126cc57600080fd5b6126d887838801612014565b909550935060208601359150808211156126f157600080fd5b506123f88682870161212c565b6000806020838503121561271157600080fd5b823567ffffffffffffffff81111561272857600080fd5b61273485828601612014565b90969095509350505050565b60006020828403121561275257600080fd5b5035919050565b60208152600061200d60208301846122c2565b60008060006040848603121561278157600080fd5b833567ffffffffffffffff8082111561279957600080fd5b6127a587838801612014565b909550935060208601359150808211156127be57600080fd5b506123f886828701612170565b6001600160a01b0381168114610b8157600080fd5b6000602082840312156127f257600080fd5b813561200d816127cb565b600181811c9082168061281157607f821691505b60208210810361283157634e487b7160e01b600052602260045260246000fd5b50919050565b600082601f83011261284857600080fd5b81516128566120fc826120c6565b81815284602083860101111561286b57600080fd5b61269782602083016020870161229e565b6000806040838503121561288f57600080fd5b825167ffffffffffffffff8111156128a657600080fd5b6128b285828601612837565b92505060208301516128c3816127cb565b809150509250929050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156128f657600080fd5b815161200d816127cb565b8015158114610b8157600080fd5b6000806040838503121561292257600080fd5b823567ffffffffffffffff8082111561293a57600080fd5b818501915085601f83011261294e57600080fd5b8135602061295e6120fc8361214c565b82815260059290921b8401810191818101908984111561297d57600080fd5b948201945b838610156129a457853561299581612901565b82529482019490820190612982565b965050860135925050808211156129ba57600080fd5b50611bce85828601612319565b600080600080608085870312156129dd57600080fd5b6129e785356127cb565b84359350602085013567ffffffffffffffff80821115612a0657600080fd5b612a1288838901612170565b94506040870135915080821115612a2857600080fd5b612a348883890161212c565b93506060870135915080821115612a4a57600080fd5b818701915087601f830112612a5e57600080fd5b8135612a6c6120fc8261214c565b8082825260208201915060208360051b86010192508a831115612a8e57600080fd5b602085015b83811015612b16578481351115612aa957600080fd5b803586016040601f19828f03011215612ac157600080fd5b612ac961206c565b6020820135612ad781611fda565b8152604082013587811115612aeb57600080fd5b612afa8f60208386010161212c565b6020830152508085525050602083019250602081019050612a93565b50979a9699509497505050505050565b604081526000612b3960408301856122c2565b8281036020840152612b4b81856122c2565b95945050505050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561038257610382612b54565b60006000198203612b9057612b90612b54565b5060010190565b600060208284031215612ba957600080fd5b815167ffffffffffffffff811115612bc057600080fd5b61269784828501612837565b600081518084526020808501808196508360051b8101915082860160005b85811015612c14578284038952612c028483516122c2565b98850198935090840190600101612bea565b5091979650505050505050565b60a081526000612c3460a08301886122c2565b8281036020840152612c4681886122c2565b90508281036040840152612c5a8187612bcc565b90506001600160e01b0319851660608401528281036080840152612c7e81856122c2565b98975050505050505050565b60008085851115612c9a57600080fd5b83861115612ca757600080fd5b5050820193919092039150565b8183823760009101908152919050565b8181038181111561038257610382612b54565b600082601f830112612ce857600080fd5b81516020612cf86120fc8361214c565b82815260059290921b84018101918181019086841115612d1757600080fd5b8286015b8481101561220557805167ffffffffffffffff811115612d3b5760008081fd5b612d498986838b0101612837565b845250918301918301612d1b565b600060208284031215612d6957600080fd5b815167ffffffffffffffff80821115612d8157600080fd5b9083019060608286031215612d9557600080fd5b604051606081018181108382111715612db057612db0612056565b6040528251612dbe816127cb565b8152602083015182811115612dd257600080fd5b612dde87828601612cd7565b602083015250604083015182811115612df657600080fd5b612e0287828601612837565b60408301525095945050505050565b6001600160a01b0381511682526000602082015160606020850152612e396060850182612bcc565b905060408301518482036040860152612b4b82826122c2565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015612ec5577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452612eb3858351612e11565b94509285019290850190600101612e79565b5092979650505050505050565b6001600160a01b038516815260006020608081840152612ef56080840187612bcc565b604084820381860152612f0882886122c2565b915084820360608601528186518084528484019150848160051b85010185890160005b83811015612f7457868303601f19018552815180516001600160e01b0319168452880151888401879052612f61878501826122c2565b9589019593505090870190600101612f2b565b50909c9b505050505050505050505050565b6001600160a01b038616815260a060208201526000612fa860a0830187612bcc565b8281036040840152612c5a81876122c2565b600060208284031215612fcc57600080fd5b815161200d81612901565b6000815160208301516001600160e01b0319808216935060048310156130075780818460040360031b1b83161693505b505050919050565b600080600080600060a0868803121561302757600080fd5b8551613032816127cb565b602087015190955067ffffffffffffffff8082111561305057600080fd5b61305c89838a01612cd7565b9550604088015191508082111561307257600080fd5b61307e89838a01612837565b94506060880151915061309082611fda565b6080880151919350808211156130a557600080fd5b506130b288828901612837565b9150509295509295909350565b60208152600061200d6020830184612e11565b601f82111561311c57600081815260208120601f850160051c810160208610156130f95750805b601f850160051c820191505b8181101561311857828155600101613105565b5050505b505050565b815167ffffffffffffffff81111561313b5761313b612056565b61314f8161314984546127fd565b846130d2565b602080601f831160018114613184576000841561316c5750858301515b600019600386901b1c1916600185901b178555613118565b600085815260208120601f198616915b828110156131b357888601518255948401946001909101908401613194565b50858210156131d15787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea2646970667358221220cbb43b54f332c6c7c4ea5ce59ae7fc892eff68ed04070f7704abf3af090a030064736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "findResolver(bytes)": {
        "details": "Finds a resolver by recursively querying the registry, starting at the longest name and progressively      removing labels until it finds a result.",
        "params": {
          "name": "The name to resolve, in DNS-encoded and normalised form."
        },
        "returns": {
          "_0": "The Resolver responsible for this name, and the namehash of the full name."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "resolve(bytes,bytes)": {
        "details": "Performs ENS name resolution for the supplied name and resolution data.",
        "params": {
          "data": "The resolution data, as specified in ENSIP-10.",
          "name": "The name to resolve, in normalised and DNS-encoded form."
        },
        "returns": {
          "_0": "The result of resolving the name."
        }
      },
      "reverse(bytes,string[])": {
        "details": "Performs ENS name reverse resolution for the supplied reverse name.",
        "params": {
          "reverseName": "The reverse name to resolve, in normalised and DNS-encoded form. e.g. b6E040C9ECAaE172a89bD561c5F73e1C48d28cd9.addr.reverse"
        },
        "returns": {
          "_0": "The resolved name, the resolved address, the reverse resolver address, and the resolver address."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "The Universal Resolver is a contract that handles the work of resolving a name entirely onchain, making it possible to make a single smart contract call to resolve an ENS name.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 529,
        "contract": "contracts/utils/UniversalResolver.sol:UniversalResolver",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 10504,
        "contract": "contracts/utils/UniversalResolver.sol:UniversalResolver",
        "label": "batchGatewayURLs",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_string_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}